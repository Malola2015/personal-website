library("rgp")
x1 <- seq(0, 4*pi, length.out=201)
x2 <- seq(0, 4*pi, length.out=201)
y <- sin(x1) + cos(2*x2)
data1 <- data.frame(y=y, x1=x1, x2=x2)
newFuncSet <- functionSet("+","-","*","sin")
result1 <- symbolicRegression(y ~ x1 + x2,
data=data1, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
bf <- result1$population[[which.min(sapply(result1$population, result1$fitnessFunction))]]
wf <- result1$population[[which.max(sapply(result1$population, result1$fitnessFunction))]]
print(bf)
print(wf)
plot(data1$y, col=1, type="l"); points(predict(result1, newdata = data1), col=2, type="l")
setwd("~/repositorios/personal-website/_posts/2017-05-14-symbolic-regression-with-genetic-programming-and-r")
data <- read.csv("longley.csv", headers=T)
pwd()
data <- read.csv("longley.csv", header=T)
data <- read.csv("longley.csv", header=T)
View(data)
View(data)
sample(nrow(data), 3)
?sample
nrow(data)
sample(nrow(data), 3)
sample(nrow(data), 3)
sample(nrow(data), 3)
sample(nrow(data), 3)
sample(nrow(data), 3)
sample(nrow(data), 3)
sample(nrow(data), 3)
sample(nrow(data), 4)
sample(nrow(data), 4)
sample(nrow(data), 4)
sample(nrow(data), 4)
?sample.split
??sample.split
library(caTools)
library(caTools)
data
data[,sample]
data <- read.csv("longley.csv", header=T)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
View(data)
?subset
View(train)
View(test)
sample
?sample.split
rownames(data)
print(paste("Train with", nrows(train), " samples; test with", nrows(test), " samples"))
nrow
nrows
print(paste("Train with", nrow(train), " samples; test with", nrow(test), " samples"))
print(paste(nrow(sample), "samples"))
data <- read.csv("longley.csv", header=T)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), " samples; test with", nrow(test), " samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
colnames(data)
result <- symbolicRegression(GNP ~ GNP.deflactor + Unemployed + Armed.Forces + Population + Year + Employed,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(GNP ~ Unemployed + Armed.Forces + Population + Year + Employed,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(GNP ~ Unemployed + Population + Year + Employed,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(GNP ~ Employed,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
library("rgp")
result <- symbolicRegression(GNP ~ Unemployed + Population + Year + Employed,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(GNP ~ Unemployed + Population + Employed,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
bf <- result1$population[[which.min(sapply(result1$population, result1$fitnessFunction))]]
wf <- result1$population[[which.max(sapply(result1$population, result1$fitnessFunction))]]
print(bf)
print(wf)
plot(data1$y, col=1, type="l"); points(predict(result1, newdata = data1), col=2, type="l")
bf <- result$population[[which.min(sapply(result1$population, result1$fitnessFunction))]]
wf <- result$population[[which.max(sapply(result1$population, result1$fitnessFunction))]]
print(bf)
print(wf)
plot(data1$y, col=1, type="l"); points(predict(result1, newdata = data1), col=2, type="l")
print(bf)
print(wf)
plot(train$y, col=1, type="l"); points(predict(result, newdata = test), col=2, type="l")
bf <- result$population[[which.min(sapply(result1$population, result1$fitnessFunction))]]
wf <- result$population[[which.max(sapply(result1$population, result1$fitnessFunction))]]
print(bf)
print(wf)
bf
bf <- result$population[[which.min(sapply(result$population, result$fitnessFunction))]]
wf <- result$population[[which.max(sapply(result$population, result$fitnessFunction))]]
print(bf)
print(wf)
plot(train$y, col=1, type="l"); points(predict(result, newdata = test), col=2, type="l")
plot(train$GNP, col=1, type="l");
plot(train$GNP, train$Year, col=1, type="l");
plot(train$year, train$GNP, col=1, type="l");
plot(train$Year, train$GNP, col=1, type="l");
result <- symbolicRegression(Unemployed ~ Population + GNP,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
bf <- result$population[[which.min(sapply(result$population, result$fitnessFunction))]]
wf <- result$population[[which.max(sapply(result$population, result$fitnessFunction))]]
print(bf)
print(wf)
plot(train$Year, train$GNP, col=1, type="l");
plot(train$Year, train$Unemployed, col=1, type="l");
points(predict(result, newdata = test), col=2, type="l")
?predict
points(predict(result, newdata = test), col=2, type="l")
test$Population
points(predict(result, test), col=2, type="l")
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
result <- symbolicRegression(Unemployed ~ Population + GNP,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
bf <- result$population[[which.min(sapply(result$population, result$fitnessFunction))]]
wf <- result$population[[which.max(sapply(result$population, result$fitnessFunction))]]
print(bf)
print(wf)
plot(train$Year, train$Unemployed, col=1, type="l");
colnames(data)
result <- symbolicRegression(Unemployed ~ Population + GNP + Year + armed.forces,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year + Armed.forces,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year + Armed.Forces,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
View(data)
View(data)
library("rgp")
library(caTools)
data <- read.csv("longley.csv", header=T)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
library("rgp")
library(caTools)
data <- read.csv("longley.csv", header=T)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train, functionSet=mathFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
bf <- result$population[[which.min(sapply(result$population, result$fitnessFunction))]]
library("rgp")
library(caTools)
data <- read.csv("longley.csv", header=T)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
mathFunctionSet=mathematicalFunctionSet,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
?symbolicRegression
library(rgp)
library(caTools)
data <- read.csv("longley.csv", header=T)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
mathFunctionSet = c("+", "-", "*")
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
arithmeticFunctionSet
mathFunctionSet = arithmeticFunctionSet
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
mathFunctionSet = arithmeticFunctionSet
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
numericConstantSet = constantFactorySet(function() rnorm(1))
result <- symbolicRegression(Unemployed ~ Population + GNP + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + as.real(Year),
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + as.numeric(Year),
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + as.numeric(Year),
data=train,
stopCondition=makeStepsStopCondition(2000))
data$Year <- as.numeric(data$Year)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
mathFunctionSet = arithmeticFunctionSet
numericConstantSet = constantFactorySet(function() rnorm(1))
result <- symbolicRegression(Unemployed ~ Population + Year,
data=train,
stopCondition=makeStepsStopCondition(2000))
result <- symbolicRegression(Unemployed ~ Population + Year + Armed.Forces,
data=train,
stopCondition=makeStepsStopCondition(2000))
data <- read.csv("longley.csv", header=T)
data$Year <- as.numeric(data$Year)
data$armedforces <- data$Armed.Forces
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
mathFunctionSet = arithmeticFunctionSet
numericConstantSet = constantFactorySet(function() rnorm(1))
result <- symbolicRegression(Unemployed ~ Population + Year + armedforces,
data=train,
stopCondition=makeStepsStopCondition(2000))
data$armedforces <- as.numeric(data$Armed.Forces)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
mathFunctionSet = arithmeticFunctionSet
numericConstantSet = constantFactorySet(function() rnorm(1))
result <- symbolicRegression(Unemployed ~ Population + Year + armedforces,
data=train,
stopCondition=makeStepsStopCondition(2000))
data <- read.csv("longley.csv", header=T)
data$Year <- as.numeric(data$Year)
data$armedforces <- as.numeric(data$armedforces)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
mathFunctionSet = arithmeticFunctionSet
numericConstantSet = constantFactorySet(function() rnorm(1))
result <- symbolicRegression(Unemployed ~ Population + Year + armedforces,
data=train,
stopCondition=makeStepsStopCondition(2000))
data <- read.csv("longley.csv", header=T)
data <- read.csv("longley.csv", header=T)
data$Year <- as.numeric(data$Year)
data$armedforces <- as.numeric(data$armedforces)
sample = sample.split(rownames(data), SplitRatio = .75)
train = subset(data, sample == TRUE)
test  = subset(data, sample == FALSE)
print(paste(nrow(data), "samples"))
print(paste("Train with", nrow(train), "samples; test with", nrow(test), "samples"))
mathFunctionSet = arithmeticFunctionSet
numericConstantSet = constantFactorySet(function() rnorm(1))
result <- symbolicRegression(Unemployed ~ Population + Year + armedforces,
data=train,
stopCondition=makeStepsStopCondition(2000))
